(**************************************************************************)
(*  Copyright 2014, Sebastien Mondet <seb@mondet.org>                     *)
(*                                                                        *)
(*  Licensed under the Apache License, Version 2.0 (the "License");       *)
(*  you may not use this file except in compliance with the License.      *)
(*  You may obtain a copy of the License at                               *)
(*                                                                        *)
(*      http://www.apache.org/licenses/LICENSE-2.0                        *)
(*                                                                        *)
(*  Unless required by applicable law or agreed to in writing, software   *)
(*  distributed under the License is distributed on an "AS IS" BASIS,     *)
(*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       *)
(*  implied.  See the License for the specific language governing         *)
(*  permissions and limitations under the License.                        *)
(**************************************************************************)

type time <ocaml from="Ketrew_gen_base_v0"> = abstract
type unique_id <ocaml from="Ketrew_gen_base_v0"> = abstract
type host <ocaml from="Ketrew_gen_base_v0"> = abstract
type program <ocaml from="Ketrew_gen_base_v0"> = abstract
type artifact <ocaml from="Ketrew_gen_base_v0"> = abstract
type artifact_value <ocaml from="Ketrew_gen_base_v0"> = abstract
type volume <ocaml from="Ketrew_gen_base_v0"> = abstract

type command = {
  host: host;
  action: program;
}

type build_process = [
  | Artifact of artifact
  | Direct_command of command
  | Long_running of (string * string)
]

type submitted_state = [
  | Created of time
]
type activated_state = [
  | Activated of (time * submitted_state * [ User | Dependency | Fallback ])
]
type run_bookkeeping = 
  { plugin_name: string; run_parameters: string; run_history: string list}
type running_state = [
  | Running of (run_bookkeeping * activated_state) 
]
type death_reason = [
  | Killed of string
  | Failed of string
]
type activated_or_running = [ (* Must be verbatim [activated_state | running_state] *)
  | Activated of (time * submitted_state * [ User | Dependency | Fallback ])
  | Running of (run_bookkeeping * activated_state) 
]
type finished_state = [ 
  | Dead of (time * activated_or_running * death_reason)
  | Successful of (time * activated_or_running * artifact)
]
(* [ submitted_state | activated_state | running_state | finished_state] *)
type workflow_state = [ 
  | Created of time
  | Activated of (time * submitted_state * [ User | Dependency | Fallback ])
  | Running of (run_bookkeeping * activated_state) 
  | Dead of (time * activated_or_running * death_reason)
  | Successful of (time * activated_or_running * artifact)
] 

type condition = [
  | True
  | False
  | Volume_exists of volume
  | Volume_size_bigger_than of (volume * int)
  | Command_returns of (command * int)
  | And of condition list
]

type equivalence = [
  | None
  | Same_active_condition
]

type id = unique_id
type t = {
  id: id;
  name: string;
  persistance: [ Input_data | Recomputable of float | Result ];
  metadata: artifact_value;
  dependencies: id list;
  if_fails_activate: id list;
  make: build_process;
  condition: condition option;
  equivalence: equivalence;
  (* result_type: artifact_type; *)
  history: workflow_state;
}
