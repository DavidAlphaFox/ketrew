
#
# Functions to create a `_test_env/` directory containing useful test goodies:
#
# - a self-signed SSL certificate/key pair
# - a Configuration file with various profiles
# - an “authorized_tokens” file for the server
# - a _test_env/env.env file providing aliases to call the application and the
# tests with different config-files
#

test_environment_dir=_test_env
test_configuration_file=$test_environment_dir/configuration.ml
test_authorized_tokens=$test_environment_dir/test-authorized-tokens
test_certificate=$test_environment_dir/test-cert.pem
test_privkey=$test_environment_dir/test-key.pem
test_server_log=$test_environment_dir/logs-of-server/
test_command_pipe=$test_environment_dir/test-command.pipe
test_shell_env=$test_environment_dir/env.env
test_tmp_dir=$test_environment_dir/tmp_dir

test_database_uri="postgresql://127.0.0.1/?user=postgres&password=kpass"

test_additional_findlib_plugin="findlib"
test_additional_findlib_plugin_code="let f () = Findlib.init ()"

set_test_additional_findlib_plugin () {
  if  ocamlfind query lwt.react > /dev/null  ; then
    export test_additional_findlib_plugin="lwt.react"
    export test_additional_findlib_plugin_code="let f () = Lwt_react.E.app"
  else
    export test_additional_findlib_plugin="graphics"
    export test_additional_findlib_plugin_code="let f () = Graphics.create_image 42 42"
  fi
  echo "Using package $test_additional_findlib_plugin as findlin-plugin"
}

ssl_cert_key () {
  mkdir -p $test_environment_dir/
  echo "Creating cert-key pair: $test_certificate, $test_privkey"
  openssl req -x509 -newkey rsa:2048 \
    -keyout $test_privkey -out $test_certificate \
    -days 10 -nodes -subj "/CN=test_ketrew" 2> /dev/null
}

test_config_file () {

    local plugin_location="$PWD/_build/src/test/dummy-plugin/dummy_plugin_test_lib.cmxs"

    local packages=$1
    echo "Creating $test_configuration_file"
    cat <<EOBLOB > $test_configuration_file

let () =
  try Topdirs.dir_directory (Sys.getenv "OCAML_TOPLEVEL_PATH")
  with Not_found -> ();;
#use "topfind"
#thread
#require "$packages"  
#directory "$PWD/_build/src/pure/"
#directory "$PWD/_build/src/lib/"
#load "ketrew_pure.cma"
#load "ketrew.cma"
open Ketrew.Configuration
let debug_level = 1
let plugins = [
  \`OCamlfind "lwt.unix";
  \`OCamlfind "$test_additional_findlib_plugin";
  \`Compiled "$plugin_location";
]
let explorer =
  explorer ~request_targets_ids:\`All 
           ~targets_per_page:5
           ~targets_to_prefetch:10 ()
let ui = ui ~with_color:true ~explorer ~with_cbreak:true ()
let my_servers ~daemon ?read_only_mode ?(tls=true) () =
  server ~ui
    ~engine:(engine ~database_parameters:"$test_database_uri"
       ~concurrent_automaton_steps:2 (* int [@default 4] *) ())
    ~authorized_tokens:[
       authorized_tokens_path "$PWD/$test_authorized_tokens";
       authorized_token ~name:"The-inline-one" "inlinetoken";
     ]
    ~return_error_messages:true
    ~log_path:"$PWD/$test_server_log"
    ~daemon ?read_only_mode
    ~command_pipe:"$PWD/$test_command_pipe"
    ~ssh_connections:[
      ssh_connection "TheLocalSSH" ~uri:"ssh://127.0.0.1";
      ssh_connection "SomeVagrantBox" ~uri:"ssh://vagrant@127.0.0.1:2222";
    ]
    ~ssh_processes_ui:true
    (if tls
     then \`Tls ("$PWD/$test_certificate", "$PWD/$test_privkey", 8443)
     else \`Tcp 8080)
let tmp_dir = "$PWD/$test_tmp_dir"
let () =
  output [
    profile "server"
      (create ~debug_level ~plugins ~tmp_dir (my_servers ()));
    profile "unsecure-server"
      (create ~debug_level ~plugins ~tmp_dir (my_servers ~tls:false ()));
    profile "read-only-server"
      (create ~debug_level ~plugins ~tmp_dir (my_servers ~read_only_mode:true ()));
    profile "client"
      (create ~debug_level ~plugins ~tmp_dir (
          client ~ui ~token:"nekot" "https://127.0.0.1:8443"
          ));
  ]

EOBLOB

  echo "Creating $test_authorized_tokens"
  cat << EOBLOB  > $test_authorized_tokens
test1 dsafkdjshh4383497hfvfnfdsfli some comments
test2 dsaifdksafhkd8437189437tfodslcjdsacfaeo some more comments for test2
easy_auth nekot easy authentication
# commented line
weird-line-that-makes-a-warning
EOBLOB
}


test_environment () {
  echo "Creating $test_shell_env"
  local common="OCAMLRUNPARAM=b"
  local dconf="$common  KETREW_CONFIGURATION=$PWD/$test_configuration_file KETREW_PROFILE=server"
  local ddconf="$common KETREW_CONFIGURATION=$PWD/$test_configuration_file KETREW_PROFILE=daemon"
  local cconf="$common  KETREW_CONFIGURATION=$PWD/$test_configuration_file KETREW_PROFILE=client"
  mkdir -p $test_environment_dir
  cat << EOBLOB > $test_shell_env
export ktest_url=https://localhost:8443
alias kdserver="$dconf  ./ketrew"
alias kduserver="$dconf KETREW_PROFILE=unsecure-server ./ketrew"
alias kdroserver="$dconf KETREW_PROFILE=read-only-server  ./ketrew"
alias kddaemon="$ddconf  ./ketrew"
alias kdclient="$cconf  ./ketrew"
alias kdtest="$cconf ./ketrew-workflow-examples"
alias kdintegration="$cconf ./ketrew-integration-test"
alias ksplugin_user="$sconf ./ketrew-dummy-plugin-user"
alias kdplugin_user="$cconf ./ketrew-dummy-plugin-user"
alias kssynth="$sconf ./ketrew-synth-workflows"
alias kdsynth="$cconf ./ketrew-synth-workflows"
EOBLOB
}

