#
# This file defines bash functions, only `make_doc` should be used from outside
# 
# It expects environment variables:
#
# - `version_string`
# - `findlib_packages` (space separated)
# - `authors` (bash-array of [print-name email webpage])
# - optionally `KAPI_DOC`: if `no` then do not build the OCamlDoc part

make_doc () {
  local git_branch=`git symbolic-ref --short HEAD`
  local outdir=_doc/
  if [ "$git_branch" != "master" ]; then
    outdir=_doc/$git_branch
  fi
  if [ "$KAPI_DOC" != "no" ] ; then
    local apidoc=$outdir/api/
    local ocamlfind_package_options=`for p in $findlib_packages ; do echo -n "-package $p " ; done`
    mkdir -p $apidoc
    ocamlfind ocamldoc -html -d $apidoc $ocamlfind_package_options  -thread \
      -charset UTF-8 -t "Ketrew API" -keep-code -colorize-code -sort \
      -I _obuild/ketrew/ $lib_mli_files $lib_ml_files 
    local dot_file=$outdir/modules.dot
    local image_file=modules.svg
    ocamlfind ocamldoc -dot -o $dot_file $ocamlfind_package_options  -thread \
      -t "Ketrew $version_string" \
      -I _obuild/ketrew/ $lib_mli_files $lib_ml_files 
    grep -v rotat $dot_file | dot -Tsvg  -o$outdir/$image_file
    rm $dot_file
  fi
  local markdown_authors_list=""
  for idx in "${authors[@]}" ; do
    eval name=\${$idx[0]}
    eval email=\${$idx[1]}
    eval web=\${$idx[2]}
    markdown_authors_list="$markdown_authors_list
- [$name]($web) (\`$email\`)"
  done

  local index_markdown=/tmp/ketrew_index_markdown
  local dev_markdown=/tmp/ketrew_devdoc_markdown

  cp README.md $index_markdown
  cat << END_MD >> $index_markdown

Authors
-------

$markdown_authors_list

END_MD

  local index=$outdir/index.html
  cp src/doc/* $outdir/
  ocaml_to_markdown src/test/Workflow_Examples.ml $outdir/Workflow_Examples.md
  ocaml_to_markdown src/test/dummy_plugin.ml $outdir/dummy_plugin.md
  ocaml_to_markdown src/test/dummy_plugin_user.ml $outdir/dummy_plugin_user.md
  ocaml_to_markdown src/test/preconfigured_main.ml $outdir/preconfigured_main.md
  ketrew_help_to_html init $outdir
  ketrew_help_to_html "--help" $outdir
  ketrew_help_to_html status $outdir
  ketrew_help_to_html run-engine $outdir
  ketrew_help_to_html kill $outdir
  ketrew_help_to_html archive $outdir
  ketrew_help_to_html interact $outdir
  ketrew_help_to_html explore $outdir
  ketrew_help_to_html autoclean $outdir
  ketrew_help_to_html start-server $outdir
  ketrew_help_to_html stop-server $outdir
  markdown_to_html $index_markdown $index "Ketrew: Home"
  for md in $outdir/*.md ; do
    local name=`basename ${md%.md} | sed 's/_/ /g'`
    markdown_to_html $md ${md%.md}.html "Ketrew: $name"
  done
}
ketrew_help_to_html () {
  local cmd=$1
  local outdir=$2
  local output=$outdir/ketrew_${cmd}_help.html
  #echo "Creating $output"
  if [ "$cmd" = "--help" ]; then
      _obuild/ketrew-app/ketrew-app.asm --help=groff | groff -Thtml -mandoc >  $output
  else
      _obuild/ketrew-app/ketrew-app.asm  $cmd --help=groff | groff -Thtml -mandoc >  $output
  fi

}
ocaml_to_markdown () {
  local input=$1
  local output=$2
  cat <<EOBLOB > $output
# File \`$input\`

\`\`\`ocaml
EOBLOB
  cat $input | sed 's/^(\*M/```/' | sed 's/^M\*)/```ocaml/' >> $output
  cat <<EOBLOB >> $output
\`\`\`
EOBLOB

}

markdown_transform_links () {
    local input=$1
    local output=$2
    sed 's:([^()]*/\([^/]*\)\.md):(\1.html):g' $input | \
        sed 's:([^()]*/test/\(.*\)\.ml):(\1.html):g' | \
        sed 's:([^()]*/lib/ketrew_long_running.ml):(api/Ketrew_long_running.html):g' | \
        sed 's:([a-z\.]*/lib/ketrew_\(.*\)\.mli):(api/Ketrew_\1.html):g' | \
        sed 's:`\(ketrew \([a-z\-]*\) *\(--help\)*\)`:[`\1`](ketrew_\2_help.html):g' > $output
}

markdown_to_html () {
    local input=$1
    local output=$2
    local title=$3
  cat << END_HTML > $output
<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="http://cdn.jsdelivr.net/bootstrap/3.1.1/css/bootstrap.min.css" type="text/css">
  <link rel="stylesheet" href="http://cdn.jsdelivr.net/bootstrap/3.1.1/css/bootstrap-theme.min.css" type="text/css">
  <link rel="stylesheet" href="code_style.css" type="text/css">
  <meta charset="utf-8">
  <title>$title</title>
</head>
  <body><div class="container">
  <h1>$title</h1>
  <div class="row">
  <div class="col-md-3">
  <h2>Contents</h2>
END_HTML
  local tmp=/tmp/kmd2html_$(basename input)
  #sed 's:src/lib/ketrew_edsl\.mli:api/Ketrew_edsl\.html:g' README.md > $index_markdown
  markdown_transform_links $input $tmp
  omd -otoc -ts 1 -td 4 $tmp >> $output
  echo "<h2>Menu</h2>" >> $output
  local menu_md=/tmp/ketrrew_doc_menu.md
  printf -- "- [Home](./index.html)\n" > $menu_md
  for md in src/doc/*.md ; do
    local name=`basename ${md%.md} | sed 's/_/ /g'`
    printf -- "- [$name]($md)\n" >> $menu_md
  done
  cat << END_MD >> $menu_md
- [Generated Documentaiton For The API](api/index.html) ([Modules Overview (SVG)](modules.svg))
END_MD
  markdown_transform_links $menu_md $menu_md.transofrm.md
  omd $menu_md.transofrm.md >> $output
  echo "</div><div class=\"col-md-9\">" >> $output
  omd -r ocaml='higlo' $tmp | grep -v '<h1' >> $output
  echo "</div></div></div></body><html>" >> $output
}


